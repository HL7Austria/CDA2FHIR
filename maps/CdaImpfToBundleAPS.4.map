map "http://hl7.at/fhir/HL7ATCoreProfiles/4.0.1/StructureMap/at-cda-to-bundle" = "CdaToBundle"

// Source 
uses "http://hl7.org/cda/stds/core/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/Material" alias Material as source
// Target 

uses "http://hl7.org/fhir/4.3/StructureDefinition/Bundle" alias Bundle as target
//uses "https://fhir.hl7.at/elga/aps/r4/StructureDefinition/at-aps-bundle" alias Bundle as target 

//uses "https://fhir.hl7.at/elga/aps/r4/StructureDefinition/at-aps-composition" alias Composition as target
uses "http://hl7.org/fhir/4.3/StructureDefinition/Immunization" alias Immunization as target
imports "http://hl7.at/fhir/HL7ATCoreProfiles/4.0.1/StructureMap/at-cda-to-fhir-types"


group CdaToFhirBundle(source cda: ClinicalDocument, target fhir_bundle: Bundle){
/*cda -> 
    fhir_bundle.id = uuid(),
    fhir_bundle.type = 'document',
    fhir_bundle.meta as fhir_bundle_meta,
    fhir_bundle_meta.profile = 'https://fhir.hl7.at/elga/aps/r4/StructureDefinition/at-aps-bundle' 
    "FhirBundleMetadata";
*/
//cda.id -> fhir_bundle.identifier "identifier";
cda.effectiveTime -> fhir_bundle.timestamp;
cda.id -> fhir_bundle.identifier; 
    



cda ->
    // create the composition to have it as reference for later transformations
    fhir_bundle.entry as fhir_bundle_entry_1,
    fhir_bundle_entry_1.resource = create('Composition') as fhir_composition
     "CDAtoFHIRBundle";



cda.component as cda_component then {
    cda_component.structuredBody as cda_structuredBody
    then(CdaBodyToFhirComposition(cda_structuredBody, fhir_composition,  fhir_bundle));
};
}

group CdaBodyToFhirComposition(source cda_structuredBody: StructuredBody, target fhir_composition: Composition,  target fhir_bundle: Bundle) {
    cda_structuredBody.component as cda_component then {
        cda_component.section as cda_section where code.where(code='11369-6' and codeSystem='2.16.840.1.113883.6.1') -> fhir_composition.section as fhir_section then CdaHistoryOfImmunizationSectionToFhirCompositionSection(cda_section, fhir_section, fhir_bundle);

    };
    }
group CdaHistoryOfImmunizationSectionToFhirCompositionSection(source cda_section: Section, source fhir_section, target fhir_bundle: Bundle) extends CdaSectionToFhirSection {
   // section.entry (Laboratory Report Data Processing Entry)
  cda_section.entry as cda_section_entry then {
    // section.entry.substanceAdministration
    cda_section_entry.substanceAdministration as cda_substanceAdministration then {
             // create Immunization
          cda_substanceAdministration -> fhir_bundle.entry as fhir_bundle_entry,
          fhir_bundle_entry.resource = create('Immunization') as fhir_immunization,
          fhir_immunization.id = uuid() as fhir_immunization_id,
          fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_immunization_id),
            fhir_section.entry = create('Reference') as fhir_section_entry_reference,
           fhir_section_entry_reference.reference = append('urn:uuid:', fhir_immunization_id),
           fhir_section_entry_reference.type = 'Immunization' then CdaSubstanceAdministrationToFhirImmunization(cda_substanceAdministration, fhir_immunization, fhir_bundle);
       };

      };
    }

group CdaSubstanceAdministrationToFhirImmunization(source cda_substanceAdministration: SubstanceAdministration, target fhir_immunization: Immunization,  target fhir_bundle: Bundle) {

    //1..1 M 	substanceAdministration.id --> AtApsImmunization.identifier 
    cda_substanceAdministration.id -> fhir_immunization.identifier;

    // 1..1 M 	//substanceAdministration[@statusCode = 'Completed']		Fixer Wert: 'Completed' --> AtApsImmunization.status
    cda_substanceAdministration.statusCode -> fhir_immunization.status;

    // 1..1 M 	substanceAdministration.effectiveTime --> AtApsImmunization. occurrenceDateTime
    cda_substanceAdministration.effectiveTime as cda_effectiveTime -> fhir_immunization.occurrence = create('dateTime') as fhir_immunization_occurrence then TSDateTime(cda_effectiveTime, fhir_immunization_occurrence) "CdaEffectiveTimeToFhirImmunizationOccurrence";

    // 0...1 	substanceAdministration.routeCode --> AtApsImmunization.route
    cda_substanceAdministration.routeCode as cda_routeCode where ($this.nullFlavor.exists().not()) -> fhir_immunization.route;
    // 0...1 	substanceAdministration.doseQuantity --> AtApsImmunization.doseQuantity
    // NullFlavor at cda_doseQuantity - Level --> Assumption that nested DataTypes do not have a NullFlavor
    cda_substanceAdministration.doseQuantity as cda_doseQuantity where ($this.nullFlavor.exists().not()) -> fhir_immunization.doseQuantity;



    // cda_substanceAdministration.doseQuantity as cda_doseQuantity_nullFlavor where ($this.nullFlavor.exists()) then {
    //     cda_doseQuantity_nullFlavor.nullFlavor -> 
    //     fhir_immunization.doseQuantity as fhir_immunization_doseQuantity,
    //     fhir_immunization_doseQuantity.extension as fhir_immunization_doseQuantity_extension then CdaNullFlavorToFhirNullFlavor(cda_doseQuantity_nullFlavor, fhir_immunization_doseQuantity_extension)
    //     "CdaDoseQuantityNullFlavorToFhirImmunizationDoseQuantityDataAbsentReason";
    // };
    
    


    cda_substanceAdministration.consumable as cda_consumable,
    cda_consumable.manufacturedProduct as cda_manufacturedProduct then {
      cda_manufacturedProduct then CdaManufacturedMaterialToFhirImmunizationMedication(cda_manufacturedProduct, fhir_immunization, fhir_bundle);
    };  
    cda_manufacturedProduct.manufacturedMaterial as cda_manufacturedMaterial then {

      
      // cda_manufacturedMaterial.lotNumberText as cda_lotNumberText where ($this.nullFlavor.exists()) then {
      //   cda_lotNumberText.nullFlavor -> 
      //   fhir_immunization.lotNumber as fhir_immunization_lotNumber,
      //   fhir_immunization_lotNumber.extension as fhir_immunization_lotNumber_extension then CdaNullFlavorToFhirNullFlavor(cda_lotNumberText, fhir_immunization_lotNumber_extension)
      //   "CdaLotNumberTextNullFlavorToFhirImmunizationLotNumberDataAbsentReason";
      
      // };

      // 1...1 R 	manufracturedProduct.ManufacturedMaterial.code --> AtApsImmunization.vaccineCode
      // fhir_immunization.vaccineCode.text --> Werte werden nicht Ã¼bernommen.


      // substanceAdministration - consumable: Vaccine Product nicht angegeben - 1.2.40.0.34.6.0.11.9.31
      cda_manufacturedMaterial.code where ($this.nullFlavor = 'NA') then {
        cda_manufacturedMaterial.code as cda_manufacturedMaterial_code,
        cda_manufacturedMaterial_code.nullFlavor ->
        fhir_immunization.vaccineCode as fhir_immunization_vaccineCode,
        fhir_immunization_vaccineCode.extension as fhir_immunization_vaccineCode_extension then CdaNullFlavorToFhirNullFlavor(cda_manufacturedMaterial_code, fhir_immunization_vaccineCode_extension)
        "CdaManufacturedMaterialCodeNullFlavorToFhirImmunizationVaccineCodeDataAbsentReason"; 
      }; 
      
      cda_manufacturedMaterial.code where ($this.nullFlavor.exists().not()) then {
        cda_manufacturedMaterial.code as cda_manufacturedMaterial_code ->
      fhir_immunization.vaccineCode as fhir_immunization_vaccineCode then 
        CECodeableConcept(cda_manufacturedMaterial_code, fhir_immunization_vaccineCode);
      
        // 1...1 	manufracturedProduct.ManufacturedMaterial.lotNumberText --> AtApsImmunization.lotNumber

      cda_manufacturedMaterial.lotNumberText where ($this.nullFlavor.exists().not()) -> fhir_immunization.lotNumber;
      
    
    
    cda_manufacturedProduct.manufacturerOrganization as cda_manufacturerOrganization then {
    cda_manufacturerOrganization ->
        fhir_bundle.entry as fhir_bundle_entry,
        fhir_bundle_entry.resource = create('Organization') as fhir_organization,
        fhir_organization.id = uuid() as fhir_organization_id,
        fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_organization_id),
        fhir_immunization.manufacturer = create('Reference') as fhir_immunization_organization,
        fhir_immunization_organization.reference = append('urn:uuid:', fhir_organization_id),
        fhir_immunization_organization.type = 'Organization' then
        CdaOrganizationCompilationToFhirOrganization(cda_manufacturerOrganization, fhir_organization);
    };


  };
  
}


group CdaManufacturedMaterialToFhirImmunizationMedication(source cda_manufacturedProduct : ManufacturedProduct, target fhir_immunization : Immunization, target fhir_bundle : Bundle) {
 
  // cda_manufacturedProduct.manufacturedMaterial as cda_manufacturedMaterial then {
   
  // cda_manufacturedMaterial.pharmIngredient as cda_ingredient
  //     where $this.exists() ->
  //       fhir_bundle.entry as fhir_bundle_entry_1,
  //       fhir_bundle_entry_1.resource = create('Medication') as fhir_medication,
  //       fhir_medication.id = uuid() as fhir_medication_id,
  //       fhir_bundle_entry_1.fullUrl = append('urn:uuid:', fhir_medication_id),

  //       fhir_immunization.extension as fhir_administeredProduct_extension,
  //       fhir_administeredProduct_extension.url = 'http://hl7.org/fhir/5.0/StructureDefinition/extension-Immunization.administeredProduct',
  //       fhir_administeredProduct_extension.extension as fhir_reference_extension,
  //       fhir_reference_extension.url = 'reference',
  //       fhir_reference_extension.value = create('Reference') as fhir_reference_value,
  //       fhir_reference_value.reference = append('urn:uuid:', fhir_medication_id),
  //       fhir_reference_value.type = 'Medication' then {
  //         cda_ingredient.pharmIngredient as cda_ingredient_ingredient then {

  //           // Noch nicht funktionsbereit. 
  //           cda_manufacturedProduct.id -> fhir_medication.identifier; 
  //           // fhir_medication.ingredient as fhir_medication_ingredient,
  //           // fhir_medication_ingredient.item as fhir_medication_ingredient_item,
  //           // fhir_medication_ingredient_item.itemCodeableConcept as fhir_medication_ingredient_item_codeableConcept;
  //           // //cda_ingredient_ingredient.code -> fhir_medication_ingredient_item_codeableConcept.code;
  //           //cda_ingredient_ingredient.name -> fhir_medication_ingredient_item_codeableConcept.text; 

  //         };
          
  //     };
  // };

}

group CdaSectionToFhirSection(source cda_section: Section, target fhir_section, target fhir_bundle: Bundle) {
  // section.templateId
  // TODO necessary?
  // section.id
  // TODO extension?

  // section.code
  // TODO mapping on CTS required from https://termgit.elga.gv.at/ValueSet/elga-laborstruktur to http://fhir.ehdsi.eu/laboratory/ValueSet/eHDSILabStudyTypeWithExceptions
  cda_section.code -> fhir_section.code;
  
  // section.title
  cda_section.title as cda_section_title -> fhir_section.title = (cda_section_title.xmlText) "test";
  // section.text
  cda_section.text as cda_section_text ->
    fhir_section.text as fhir_section_text,
    fhir_section_text.status = 'generated' then {
      // section.text where no section.languageCode exists
      cda_section_text where cda_section.languageCode.exists().not() -> fhir_section_text.div = cda_section_text "asdf";

      // section.text with section.languageCode
      cda_section_text where cda_section.languageCode.exists() then {
        cda_section.languageCode as cda_languageCode then {
          cda_languageCode.code as cda_languageCode_code ->

            // as long as TODO below has not been solved
            fhir_section_text.div = cda_section_text "asdf";
            // TODO fix output:
            //   Currently, the output will look like <div xml:lang="XX"><div xmlns="http://www.w3.org/1999/xhtml">section.text</div></div>
            //   However, the div-tag with the xml:lang should be within the div-tag with the xmlns.
            //
            //  fhir_section_text.div = append('<div xml:lang="', cda_languageCode_code, '">', cda_section_text, '</div>') "asdf";
        };
      } "CdaSectionTextToFhirSectionTextWithLanguage";
    };
  // section.author
  cda_section.author as cda_section_author ->
    // create the PractitionerRole in order to capture the author
    fhir_bundle.entry as fhir_bundle_entry,
    fhir_bundle_entry.resource = create('PractitionerRole') as fhir_practitionerRole,
    fhir_practitionerRole.id = uuid() as fhir_practitionerRole_id,
    fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_practitionerRole_id),
    fhir_section.author = create('Reference') as fhir_section_author_reference,
    fhir_section_author_reference.reference = append('urn:uuid:', fhir_practitionerRole_id),
    fhir_section_author_reference.type = 'PractitionerRole' then
    CdaAuthorToFhirPractitionerRole(cda_section_author, fhir_practitionerRole, fhir_bundle); //hinzufÃ¼gen der PractitionerRole

}


group CdaAuthorToFhirPractitionerRole(source cda_author : Author, target fhir_practitionerRole : PractitionerRole, target fhir_bundle : Bundle){
  cda_author ->
    // create the Practitioner
    fhir_bundle.entry as fhir_bundle_entry,
    fhir_bundle_entry.resource = create('Practitioner') as fhir_practitioner,
    fhir_practitioner.id = uuid() as fhir_practitioner_id,
    fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_practitioner_id),
    fhir_practitionerRole.practitioner = create('Reference') as fhir_practitionerRole_practitioner_reference,
    fhir_practitionerRole_practitioner_reference.reference = append('urn:uuid:', fhir_practitioner_id),
    fhir_practitionerRole_practitioner_reference.type = 'Practitioner' then {

      // ClinicalDocument.author.functionCode
      // TODO in CDA no value set is specified for this element, so mapping is not possible as it could be any code
      //      in FHIR (MyHealth@EU Lab) however a required binding for this optional element exits
      // cda_author.functionCode -> fhir_practitionerRole.code;

      // ClinicalDocument.author.time
      // TODO extension?
      // ClinicalDocument.author.time
      // TODO nullFlavor? http://hl7.org/fhir/R4/extension-data-absent-reason.html
      // ClinicalDocument.author.assignedAuthor
      cda_author.assignedAuthor as cda_author_assignedAuthor then {
        // ClinicalDocument.author.assignedAuthor.id
        cda_author_assignedAuthor.id -> fhir_practitioner.identifier;
        // ClinicalDocument.author.assignedAuthor.code
        cda_author_assignedAuthor.code as cda_author_assignedAuthor_code ->
          fhir_practitioner.qualification as fhir_practitioner_qualification,
          fhir_practitioner_qualification.code as fhir_practitioner_qualification_code then
          CECodeableConcept(cda_author_assignedAuthor_code,fhir_practitioner_qualification_code);
        // ClinicalDocument.author.assignedAuthor.telecom
        cda_author_assignedAuthor.telecom -> fhir_practitioner.telecom;
        // ClinicalDocument.author.assignedAuthor.assignedPerson
        cda_author_assignedAuthor.assignedPerson as cda_assignedPerson then {
          cda_assignedPerson.name -> fhir_practitioner.name;
        };
        // ClinicalDocument.author.assignedAuthor.representedOrganization
        cda_author_assignedAuthor.representedOrganization as cda_representedOrganization ->
          fhir_bundle.entry as fhir_bundle_entry,
          fhir_bundle_entry.resource = create('Organization') as fhir_organization,
          fhir_organization.id = uuid() as fhir_organization_id,
          fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_organization_id),
          fhir_practitionerRole.organization = create('Reference') as fhir_practitionerRole_organization,
          fhir_practitionerRole_organization.reference = append('urn:uuid:', fhir_organization_id),
          fhir_practitionerRole_organization.type = 'Organization' then
          CdaOrganizationCompilationToFhirOrganization(cda_representedOrganization, fhir_organization);
      };
    } "CdaAuthorToFhirPractitionerRole";
}