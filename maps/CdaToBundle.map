map "http://hl7.at/fhir/HL7ATCoreProfiles/4.0.1/StructureMap/at-cda-to-bundle" = "CdaToBundle"

//
// Mapping CDA2FHIR
//

conceptmap "cda-sdtc-statuscode-2-fhir-composition-status" {
  prefix s = "http://terminology.hl7.org/ValueSet/v3-AdministrativeGender"
  prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"

  s:"active" == t:"preliminary"
  s:"nullified" == t:"entered-in-error"
}

conceptmap "cm-v3-administrative-gender" {
  prefix s = "http://terminology.hl7.org/ValueSet/v3-AdministrativeGender"
  prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"

  s:M == t:male
  s:F == t:female
}

// TODO review mapping
// TODO deal with nullFlavor
conceptmap "ELGAAdministrativeGenderFHIRGender" {
  prefix s = "https://termgit.elga.gv.at/ValueSet-elga-administrativegender"
  prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"

  s:"F" == t: "female"
  s:"M" == t:"male"
  s:"UN" == t: "other"
}

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/Author" alias Author as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/PractitionerRole" alias PractitionerRole as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced

imports "http://hl7.at/fhir/HL7ATCoreProfiles/4.0.1/StructureMap/at-cda-to-fhir-types"


// _________________________ Document Level Template  _________________________

group CdaToFhirBundle(source cda : ClinicalDocument, target fhir_bundle : Bundle) {
  cda -> fhir_bundle.id = uuid() "id";
  // ClinicalDocument.id
  cda.id -> fhir_bundle.identifier "identifier";
  cda -> fhir_bundle.type = 'document' "FhirBundlType";
  // ClinicalDocument.effectiveTime
  cda.effectiveTime -> fhir_bundle.timestamp;

  cda -> fhir_bundle.entry as fhir_bundle_entry_1,
    // create the composition to have it as reference for later transformations
    fhir_bundle_entry_1.resource = create('Composition') as fhir_composition,
    fhir_composition.id = uuid() as fhir_composition_uuid,
    fhir_bundle_entry_1.fullUrl = append('urn:uuid:', fhir_composition_uuid),

    // create the patient to have it as reference for later transformations
    fhir_bundle.entry as fhir_bundle_entry_2,
    fhir_bundle_entry_2.resource = create('Patient') as fhir_patient,
    fhir_patient.id = uuid() as fhir_patient_uuid,
    fhir_bundle_entry_2.fullUrl = append('urn:uuid:', fhir_patient_uuid),

    // create the specimen to have it as reference for later transformations
    fhir_bundle.entry as fhir_bundle_entry_3,
    fhir_bundle_entry_3.resource = create('Specimen') as fhir_specimen,
    fhir_specimen.id = uuid() as fhir_specimen_uuid,
    fhir_bundle_entry_3.fullUrl = append('urn:uuid:', fhir_specimen_uuid),

    // create relation from composition to patient
    fhir_composition.subject = create('Reference') as fhir_composition_subject_reference,
    fhir_composition_subject_reference.reference = reference(fhir_patient),
    fhir_composition_subject_reference.type = 'Patient',

    // create relation from specimen to patient
    fhir_specimen.subject = create('Reference') as fhir_specimen_patient_reference,
    fhir_specimen_patient_reference.reference = reference(fhir_patient),
    fhir_specimen_patient_reference.type = 'Patient'

    then {
      cda then CdaToFhirComposition(cda, fhir_composition, fhir_patient, fhir_bundle) "CdaToFhirComposition";
      // cda.component as component then {
      //   component.structuredBody as structuredBody then {
      //     structuredBody.component as component log 'component' then {
      //       // component.section as srcSection where $this.code.empty() -> composition.section as tgtSection then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle);
      //     } "component";
      //   } "body";
      // } "component";
    }

    "CdaToFhirBundle";
}

// _________________________ Header Level Templates _________________________

group CdaToFhirComposition(source cda : ClinicalDocument, target fhir_composition : Composition, target fhir_patient: Patient, target fhir_bundle : Bundle) {
  // ClinicalDocument.code & ClinicalDocument.code.translation
  cda.code -> fhir_composition.type;
  // ClinicalDocument.title
  cda.title as cda_title -> fhir_composition.title = (cda_title.dataString);
  // ClinicalDocument.sdtc:statusCode
  // TODO clarify mapping
  cda.statusCode as cda_statusCode where cda.statusCode.exists() then {
    cda_statusCode.code as cda_code -> fhir_composition.status = translate(cda_code, '#cda-sdtc-statuscode-2-fhir-composition-status' , 'code');
  } "CdaStatusCodeToFhirCompositionStatusMapped";
  cda where cda.statusCode.exists().not() -> fhir_composition.status = 'final' "CdaStatusCodeToFhirCompositionStatusFixed";
  // TODO ClinicalDocument.hl7at:terminologyDate
  // cda.terminologyDate ->
  // TODO ClinicalDocument.hl7at:formatCode
  // cda.formatCode ->
  // TODO ClinicalDocument.hl7at:practiceSettingCode
  // cda.practiceSettingCode ->
  // ClinicalDocument.effectiveTime
  cda.effectiveTime -> fhir_composition.date;
  // ClinicalDocument.confidentialityCode
  cda.confidentialityCode -> fhir_composition.confidentiality; // no code conversion needed
  // ClinicalDocument.languageCode
  cda.languageCode -> fhir_composition.language;
  // ClinicalDocument.setId
  cda.setId -> fhir_composition.identifier;
  // TODO ClinicalDocument.versionNumber
  // cda.versionNumber ->

  // ClinicalDocument.recordTarget
  cda.recordTarget as cda_recordTarget then {
    // ClinicalDocument.recordTarget.patientRole
    cda_recordTarget.patientRole as cda_patientRole then CdaPatientRoleToFhirPatient(cda_patientRole, fhir_patient, fhir_bundle) "CdaPatientRoleToFhirPatient";
  } "CdaRecordTargetToFhirPatient";

  // ClinicalDocument.author (as person)
  cda.author as cda_author where $this.assignedAuthor.assignedPerson.exists() ->
    // create the PractitionerRole in order to capture the author.functionCode
    fhir_bundle.entry as fhir_bundle_entry,
    fhir_bundle_entry.resource = create('PractitionerRole') as fhir_practitionerRole,
    fhir_practitionerRole.id = uuid() as fhir_practitionerRole_id,
    fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_practitionerRole_id),
    fhir_composition.author = create('Reference') as fhir_composition_author_reference,
    fhir_composition_author_reference.reference = reference(fhir_practitionerRole),
    fhir_composition_author_reference.type = 'PractitionerRole' then
    CdaAuthorToFhirPractitionerRole(cda_author, fhir_practitionerRole, fhir_bundle)
    "CdaAuthorToFhirPractitionerRole";

  // src.author as srcAuthor ->  bundle.entry as e,
  //   e.resource = create('Practitioner') as practitioner,
  //   practitioner.id = uuid() as uuid2,
  //   e.fullUrl = append('urn:uuid:',uuid2),
  //   tgt.author = create('Reference') as reference, reference.reference = ('urn:uuid:'+%practitioner.id) then {
  //   srcAuthor.time as time -> reference.extension as exttime then ChExtEprTime(time, exttime) "time";
  //   srcAuthor.assignedAuthor as assignedAuthor then {
  //     assignedAuthor.id -> practitioner.identifier;
  //     assignedAuthor.addr -> practitioner.address;
  //     assignedAuthor.telecom -> practitioner.telecom;
  //     assignedAuthor.assignedPerson as person then {
  //       person.name -> practitioner.name;
  //     } "name";
  //     assignedAuthor.representedOrganization as srcOrg ->
  //       bundle.entry as e2,
  //       e2.resource = create('Organization') as organization,
  //       organization.id = uuid() as uuid3,
  //       e2.fullUrl = append('urn:uuid:',uuid3),
  //       tgt.author = create('Reference') as reference2, reference2.reference = ('urn:uuid:'+%organization.id) then ClinicalDocumentOrganization(srcOrg, organization);
  //   } "author";
  // } "srcAuthor";

  // src.componentOf as comp ->  bundle.entry as e,
  //   e.resource = create('Encounter') as encounter,
  //   encounter.id = uuid() as uuid,
  //   e.fullUrl = append('urn:uuid:',uuid) then {
  //     comp.encompassingEncounter as srcEnc -> tgt.encounter = create('Reference') as reference, reference.reference = ('urn:uuid:'+%encounter.id) then ClinicalDocumentEncounter(srcEnc, bundle, encounter) "srcEncounter";
  //   } "encompassingEncounter";

  // src.legalAuthenticator as legalAuth ->  bundle.entry as e,
  //   e.resource = create('Practitioner') as practitioner,
  //   practitioner.id = uuid() as uuid2,
  //   e.fullUrl = append('urn:uuid:',uuid2) then {
  //   legalAuth -> tgt.attester as attester then {
  //     legalAuth -> attester.mode = 'legal' "mode";
  //     legalAuth.time -> attester.time;
  //     legalAuth.assignedEntity as entity -> attester.party = create('Reference') as reference, reference.reference = ('urn:uuid:'+%practitioner.id) then ClinicalDocumentEntityPractitioner(entity, practitioner) "entity";
  //   } "attester";
  // } "legalAuth";
  // src.authenticator as auth ->  bundle.entry as e,  e.resource = create('Practitioner') as practitioner,
  //   practitioner.id = uuid() as uuid2,
  //   e.fullUrl = append('urn:uuid:',uuid2) then {
  //   auth -> tgt.attester as attester then {
  //     auth -> attester.mode = 'official' "mode";
  //     auth.time -> attester.time;
  //     auth.assignedEntity as entity -> attester.party = create('Reference') as reference, reference.reference = ('urn:uuid:'+%practitioner.id) then ClinicalDocumentEntityPractitioner(entity, practitioner) "entity";
  //   } "attester";
  // } "auth";
  // src.custodian as custodian -> bundle.entry as e then {
  //   custodian.assignedCustodian as assignedCustodian ->
  //     e.resource = create('Organization') as organization,
  //     organization.id = uuid() as uuid3,
  //     e.fullUrl = append('urn:uuid:',uuid3) then {
  //     assignedCustodian.representedCustodianOrganization as srcOrg -> tgt.custodian = create('Reference') as reference, reference.reference = ('urn:uuid:'+%organization.id) then ClinicalDocumentOrganization(srcOrg, organization) "assignedCustodian";
  //   } "custodian";
  // } "cust";
  // src.documentationOf as docOf then {
  //   docOf.serviceEvent as serviceEvent -> tgt.event as event then {
  //     serviceEvent.code -> event.code "eventCode";
  //     serviceEvent.effectiveTime -> event.period "eventTime"; // performerType: for src.performer.typeCode ...
  //   } "docOf";
  // } "documentationOf";
  // src.relatedDocument as relatedDoc -> tgt.relatesTo as relates then {
  //   relatedDoc.typeCode -> relates.code;
  //   relatedDoc.parentDocument as parentDoc then {
  //     parentDoc.setId -> relates.targetIdentifier;
  //   } "parentDoc";
  // } "relatedDoc";
}

group CdaPatientRoleToFhirPatient(source cda_patientRole : PatientRole, target fhir_patient : Patient, target fhir_bundle : Bundle) {
  cda_patientRole ->
    fhir_patient.meta as fhir_patient_meta,
    fhir_patient_meta.profile = 'http://hl7.at/fhir/HL7ATCoreProfiles/4.0.1/StructureDefinition/at-core-patient'
    "FhirPatientAtCorePatientProfile";

  // TODO check with TC FHIR how profile has to be read - are there additional identifier having no coding allowed apart from PI, SS, or NI?
  // patientRole.id[1]
  cda_patientRole.id first as cda_patientRole_id -> fhir_patient.identifier = create('Identifier') as fhir_patient_identifier then {
    // patientRole.id
    cda_patientRole_id then II(cda_patientRole_id, fhir_patient_identifier) "CdaIdToFhirIdentifier";
    // setting identifier.type.coding according to profile
    cda_patientRole_id ->
      fhir_patient_identifier.type as identifier_type,
      identifier_type.coding as type_coding,
      type_coding.system = 'http://terminology.hl7.org/CodeSystem/v2-0203',
      type_coding.code = 'PI',
      type_coding.display = 'Patient internal identifier'
      "FhirPatientIdentifierTypeCodingPI";
  } "CdaLocalPatientIdToFhirPatientIdentifier";

  // patientRole.id[>1]
  cda_patientRole.id not_first as cda_patientRole_id -> fhir_patient.identifier = create('Identifier') as fhir_patient_identifier then {
    // patientRole.id
    cda_patientRole_id then II(cda_patientRole_id, fhir_patient_identifier) "CdaIdToFhirIdentifier";

    // setting identifier.type.coding according to profile for Social Security Number
    cda_patientRole_id where (cda_patientRole_id.root = "1.2.40.0.10.1.4.3.1") ->
      // according to profile no or this fixed value is required
      fhir_patient_identifier.assigner as assigner,
      assigner.display = 'Dachverband der österreichischen Sozialversicherungsträger',

      fhir_patient_identifier.type as identifier_type,
      identifier_type.coding as type_coding,
      type_coding.system = 'http://terminology.hl7.org/CodeSystem/v2-0203',
      type_coding.code = 'SS',
      type_coding.display = 'Social Security Number'
      "FhirPatientIdentifierTypeCodingSS";

    // setting identifier.type.coding according to profile for National unique individual identifier
    cda_patientRole_id where (cda_patientRole_id.root = "1.2.40.0.10.2.1.1.149") ->
      // according to profile no or this fixed value is required
      fhir_patient_identifier.assigner as assigner,
      assigner.display = 'Bundesministerium für Inneres',

      fhir_patient_identifier.type as identifier_type,
      identifier_type.coding as type_coding,
      type_coding.system = 'http://terminology.hl7.org/CodeSystem/v2-0203',
      type_coding.code = 'NI',
      type_coding.display = 'National unique individual identifier'
      "FhirPatientIdentifierTypeCodingNI";
  } "CdaPatientIdToFhirPatientIdentifier";

  // patientRole.addr using ADAustrianAddress
  cda_patientRole.addr as cda_patientRole_addr ->
    fhir_patient.address = create('Address') as fhir_patient_address then
    CdaAdressCompilationToFhirAustrianAddress(cda_patientRole_addr, fhir_patient_address)
    "CdaPatientAddressToFhirPatientAustrianAddress";

  // patientRole.telecom
  cda_patientRole.telecom -> fhir_patient.telecom;

  // patientRole.patient
  cda_patientRole.patient as cda_patient then {
    // patient.name
    cda_patient.name -> fhir_patient.name;
    // patient.administrativeGenderCode
    cda_patient.administrativeGenderCode as cda_patient_gender then {
      // patient.administrativeGenderCode.code
      cda_patient_gender.code as cda_patient_gender_code -> fhir_patient.gender = translate(cda_patient_gender_code, '#ELGAAdministrativeGenderFHIRGender', 'code') "CdaPatientGenderCodeToFhirPatientGenderCode";
      // TODO patient.administrativeGenderCode.translation
    } "CdaPatientGenderToFhirPatientGender";
    // patient.birthTime (only date)
    cda_patient.birthTime -> fhir_patient.birthDate;
    // patient.birthTime (with time if available)
    cda_patient.birthTime as cda_patient_birthTime where (cda_patient.birthTime.value.length() > 10) -> fhir_patient.birthDate as fhir_patient_birthDate,
      fhir_patient_birthDate.extension as extension,
      extension.url = 'http://hl7.org/fhir/StructureDefinition/patient-birthTime',
      extension.value = (cda_patient_birthTime.value) "CdaPatientBirthTimeToFhirPatientBirthTimeExtension";
    // patient.deceasedInd
    cda_patient.deceasedInd as cda_patient_deceasedInd where cda_patient.deceasedTime.empty() -> fhir_patient.deceased = create('boolean') as fhir_patient_deceased then BL(cda_patient_deceasedInd, fhir_patient_deceased) "CdaPatientDeceasedIndToFhirPatientDeceasedBoolean";
    // patient.deceasedTime
    cda_patient.deceasedTime as cda_patient_deceasedTime -> fhir_patient.deceased = create('dateTime') as fhir_patient_deceased then TSDateTime(cda_patient_deceasedTime, fhir_patient_deceased) "CdaPatientDeceasedTimeToFhirPatientDeceasedDateTime";
    // patient.maritalStatusCode
    cda_patient.maritalStatusCode -> fhir_patient.maritalStatus;
    // patient.religiousAffiliationCode
    cda_patient.religiousAffiliationCode as cda_patient_religiousAffiliationCode ->
      fhir_patient.extension as religion_extension,
      religion_extension.url = 'http://hl7.at/fhir/HL7ATCoreProfiles/4.0.1/StructureDefinition/at-core-ext-patient-religion',
      religion_extension.extension as religion_extension_code,
      religion_extension_code.url = 'code',
      religion_extension_code.value = create('CodeableConcept') as religion_extension_codeableConcept then CECodeableConcept(cda_patient_religiousAffiliationCode, religion_extension_codeableConcept)
      "CdaPatientReligiousAffiliationCodeToFhirPatientReligionExtension";
    // patient.raceCode NP
    // patient.ethnicGroupCode NP
    // patient.guardian
    cda_patient.guardian as cda_patient_guardian -> fhir_patient.contact as fhir_patient_contact then {
      // TODO code for fhir_patient_contact.relationship
      // patient.guardian.addr
      cda_patient_guardian.addr as cda_patient_guardian_addr -> fhir_patient_contact.address = create('Address') as fhir_contact_address then CdaAdressCompilationToFhirAustrianAddress(cda_patient_guardian_addr, fhir_contact_address) "CdaGuardianAddressToFhirContactAddress";
      // patient.guardian.telecom
      cda_patient_guardian.telecom -> fhir_patient_contact.telecom;
      // patient.guardian.guardianPerson
      cda_patient_guardian.guardianPerson as cda_guardian_person then {
        // patient.guardian.guardianPerson.name
        cda_guardian_person.name -> fhir_patient_contact.name;
      } "CdaPatientGuardianPersonToFhirPatientContactName";
      // patient.guardian.guardianOrganization
      cda_patient_guardian.guardianOrganization as cda_guardian_organization then {
        cda_guardian_organization.name as cda_organization_name ->
          fhir_bundle.entry as fhir_bundle_entry,
          fhir_bundle_entry.resource = create('Organization') as fhir_contact_organization,
          fhir_contact_organization.id = uuid() as fhir_contact_organization_id,
          // patient.guardian.guardianOrganization.name
          fhir_contact_organization.name = (cda_organization_name.other),
          fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_contact_organization_id),

          fhir_patient_contact.organization = create('Reference') as fhir_contact_organization_reference,
          fhir_contact_organization_reference.reference = reference(fhir_contact_organization)
          "CdaPatientGuardianOrganizationNameToFhirContactOrganizationReference";
      } "CdaPatientGuardianOrganizationToFhirPatientContactOrganization";
    } "CdaPatientGuardianToFhirPatientContact";
    // patient.birthplace
    cda_patient.birthplace as cda_patient_birthplace then {
      cda_patient_birthplace.place as cda_patient_place then {
        cda_patient_place.addr as cda_patient_birthaddr ->
          fhir_patient.extension as birthplace_extension,
          birthplace_extension.url = 'http://hl7.org/fhir/StructureDefinition/patient-birthPlace',
          birthplace_extension.value = create('Address') as birthplace_extension_addr then CdaAdressCompilationToFhirAustrianAddress(cda_patient_birthaddr, birthplace_extension_addr)
          "CdaPatientBirthplaceAddrToFhirPatientBirthplaceExtensionValue";
      };
    } "CdaPatientBirthplaceToFhirPatientBirthplaceExtension";
    // patient.languageCommunication
    cda_patient.languageCommunication as cda_patient_language -> fhir_patient.communication as fhir_patient_communication then {
      // patient.languageCommunication.languageCode
      // TODO code mapping
      cda_patient_language.languageCode -> fhir_patient_communication.language;
      // patient.languageCommunication.preferenceInd
      cda_patient_language.preferenceInd -> fhir_patient_communication.preferred;

      cda_patient_language where cda_patient_language.modeCode.exists() or cda_patient_language.proficiencyLevelCode.exists() ->
        fhir_patient_communication.extension as communication_extension,
        communication_extension.url = 'http://hl7.org/fhir/StructureDefinition/patient-proficiency' then {
          // patient.languageCommunication.modeCode
          cda_patient_language.modeCode as cda_patient_language_modeCode ->
            communication_extension.extension as communication_extension_type,
            communication_extension_type.url = 'type',
            communication_extension_type.value = create('Coding') as communication_extension_type_coding then CECoding(cda_patient_language_modeCode, communication_extension_type_coding)
            "CdaLanguageModeCodeToFhirProficiencyType";
          // patient.languageCommunication.proficiencyLevelCode
          cda_patient_language.proficiencyLevelCode as cda_patient_language_proficiencyLevelCode ->
            communication_extension.extension as communication_extension_level,
            communication_extension_level.url = 'level',
            communication_extension_level.value = create('Coding') as communication_extension_level_coding then CECoding(cda_patient_language_proficiencyLevelCode, communication_extension_level_coding)
            "CdaLanguageProficiencyLevelToFhirProficiencyLevel";
        }
        "CdaPatientLanguageProficiencyToFhirPatientCommunicationProficiencyExtension";
    } "CdaPatientLanguageCommunicationToFhirPatientCommunication";
  } "CdaPatientToFhirPatient";
}


group CdaAuthorToFhirPractitionerRole(source cda_author : Author, target fhir_practitionerRole : PractitionerRole, target fhir_bundle : Bundle){
  cda_author ->
    // create the Practitioner
    fhir_bundle.entry as fhir_bundle_entry,
    fhir_bundle_entry.resource = create('Practitioner') as fhir_practitioner,
    fhir_practitioner.id = uuid() as fhir_practitioner_id,
    fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_practitioner_id),
    fhir_practitionerRole.practitioner = create('Reference') as fhir_practitionerRole_practitioner_reference,
    fhir_practitionerRole_practitioner_reference.reference = reference(fhir_practitioner),
    fhir_practitionerRole_practitioner_reference.type = 'Practitioner' then {
      // ClinicalDocument.author.functionCode
      cda_author.functionCode -> fhir_practitionerRole.code;
      // ClinicalDocument.author.time
      // TODO extension?
      // ClinicalDocument.author.time
      // TODO nullFlavor?
      // ClinicalDocument.author.assignedAuthor
      cda_author.assignedAuthor as cda_author_assignedAuthor then {
        // ClinicalDocument.author.assignedAuthor.id
        cda_author_assignedAuthor.id -> fhir_practitioner.identifier;
        // ClinicalDocument.author.assignedAuthor.code
        cda_author_assignedAuthor.code as cda_author_assignedAuthor_code ->
          fhir_practitioner.qualification as fhir_practitioner_qualification,
          fhir_practitioner_qualification.code as fhir_practitioner_qualification_code then
          CECodeableConcept(cda_author_assignedAuthor_code,fhir_practitioner_qualification_code)
          "CdaAssignedAuthorCodeToFhirQualificationCode";
        // ClinicalDocument.author.assignedAuthor.telecom
        cda_author_assignedAuthor.telecom -> fhir_practitioner.telecom;
        // ClinicalDocument.author.assignedAuthor.assignedPerson
        cda_author_assignedAuthor.assignedPerson as cda_assignedPerson then {
          cda_assignedPerson.name -> fhir_practitioner.name;
        };
        // ClinicalDocument.author.assignedAuthor.representedOrganization
        cda_author_assignedAuthor.representedOrganization as cda_representedOrganization ->
          fhir_bundle.entry as fhir_bundle_entry,
          fhir_bundle_entry.resource = create('Organization') as fhir_organization,
          fhir_organization.id = uuid() as fhir_organization_id,
          fhir_bundle_entry.fullUrl = append('urn:uuid:', fhir_organization_id),
          fhir_practitionerRole.organization = create('Reference') as fhir_practitionerRole_organization,
          fhir_practitionerRole_organization.reference = reference(fhir_organization),
          fhir_practitionerRole_organization.type = 'Organization' then
          CdaOrganizationCompilationToFhirOrganization(cda_representedOrganization, fhir_organization);
      } "assignedAuthor";
    } "CdaAuthorToFhirPractitionerRole";
}

// group ClinicalDocumentEntityPractitioner(source src : AssignedEntity, target tgt : Practitioner) {
//   src.id -> tgt.identifier;
//   src.addr -> tgt.address;
//   src.telecom -> tgt.telecom;
//   src.assignedPerson as person then {
//     person.name -> tgt.name;
//   } "name";
// }

// group ClinicalDocumentOrganization(source src : CustodianOrganization, target tgt : Organization) {
//   src.id -> tgt.identifier;
//   src.name as v -> tgt.name = (v.other);
//   src.telecom -> tgt.telecom;
//   src.addr -> tgt.address;
// }

// group ClinicalDocumentEncounter(source src : EncompassingEncounter, target bundle : Bundle, target tgt : Encounter) {
//   src.id -> tgt.identifier;
//   src.code -> tgt.type;
//   src.effectiveTime -> tgt.period;
//   src where admissionReferralSourceCode.exists() or dischargeDispositionCode.exists() -> tgt.hospitalization as hosp then {
//     src.admissionReferralSourceCode -> hosp.admitSource "adminReferral";
//     src.dischargeDispositionCode -> hosp.dischargeDisposition "discDisposition";
//   } "hospitalization";
//   src.encounterParticipant as srcPart -> tgt.participant as tgtPart then {
//     srcPart.typeCode as code -> tgtPart.type = cc('http://terminology.hl7.org/CodeSystem/v3-ParticipationType', code);
//     srcPart.time -> tgtPart.period;
//     srcPart.assignedEntity as entity ->  bundle.entry as e,  e.resource = create('Practitioner') as practitioner,
//       practitioner.id = uuid() as uuid2,
//       e.fullUrl = append('urn:uuid:',uuid2) then {
//       entity -> tgtPart.individual = create('Reference') as reference, reference.reference = ('urn:uuid:'+%practitioner.id) then ClinicalDocumentEntityPractitioner(entity, practitioner) "entry";
//     } "entity";
//   } "participant";
//   src.location as srcLocation then {
//     srcLocation.healthCareFacility as facility ->  bundle.entry as e,  e.resource = create('Location') as location,
//        location.id = uuid() as uuid2,
//        e.fullUrl = append('urn:uuid:',uuid2) then {
//       facility ->  tgt.location as tgtLocation,  tgtLocation.location = create('Reference') as reference, reference.reference = ('urn:uuid:'+%location.id) then ClinicalDocumentLocation(facility, bundle, location) "facLocation";
//     } "facility";
//   } "location";
// }

// group ClinicalDocumentLocation(source src : HealthCareFacility, target bundle : Bundle, target tgt : Location) {
//   src.id -> tgt.identifier;
//   src.code -> tgt.type;
//   src.location as location then {
//  // place names are usually stored with no parts    location.name as srcName -> tgt.name = cast(srcName, 'string');
//     location.addr -> tgt.address;
//     location.serviceProviderOrganization as srcOrg ->  bundle.entry as e,  e.resource = create('Organization') as organization,
//       organization.id = uuid() as uuid3,
//       e.fullUrl = append('urn:uuid:',uuid3) then {
//       srcOrg -> tgt.managingOrganization = create('Reference') as reference, reference.reference = ('urn:uuid:'+%organization.id) then ClinicalDocumentOrganization(srcOrg, organization) "organization";
//     } "org";
//   } "location"; // place names are usually stored with no parts
// }


// // source dataEnterer: https://art-decor.org/art-decor/decor-templates--hl7chcda-?id=2.16.756.5.30.1.1.10.2.7
// // source author: https://art-decor.org/art-decor/decor-templates--hl7chcda-?id=2.16.840.1.113883.10.12.102
// // target: https://build.fhir.org/ig/hl7ch/ch-core//StructureDefinition-ch-ext-epr-time.html
// group ChExtEprTime(source src: TSDateTime, target ext: Extension) {
//   src -> ext.url = 'http://fhir.ch/ig/ch-core/StructureDefinition/ch-ext-epr-time' "url";
//   src -> ext.value = create('dateTime') as value then TSDateTime(src, value) "value";
// }


// // https://art-decor.org/art-decor/decor-templates--hl7chcda-?id=2.16.756.5.30.1.1.10.3.45
// // target: http://build.fhir.org/ig/hl7ch/ch-core/branches/master/StructureDefinition-ch-ext-epr-sectionid.html
// group ChExtEprSectionId(source src: II, target ext: Extension) {
//   src -> ext.url = 'http://fhir.ch/ig/ch-core/StructureDefinition/ch-ext-epr-sectionid' "url";
//   src -> ext.value = create('Identifier') as value then II(src, value) "value";
// }

// // _________________________ Section Level Templates _________________________

// group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, source patient : Patient, target tgt, target bundle: Bundle) {
//   src.id as id where ($this.root=%cda.id.root)=false -> tgt.extension as ext then ChExtEprSectionId(id, ext) "sectionId";
//   src.title as t -> tgt.title = (t.dataString);
//   src.code -> tgt.code;
//   src.text as cdaText -> tgt.text as fhirText then {
//     cdaText -> fhirText.status = 'generated' "narrativeStatus";
//     cdaText as t -> fhirText.div = t "narrativeText";
//   } "cdaText";
//   src.section as srcSection -> tgt.section as tgtSection then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle);
// }

// // _________________________ Entry Level Templates   ________________________

// // _________________________ Template Type not specified  ___________________

// group NarrativeLink(source url, target ext: Extension) {
//   url -> ext.url = 'http://hl7.org/fhir/StructureDefinition/narrativeLink' "url";
//   url -> ext.value = create('url') as value, value.value=url "value";
// }